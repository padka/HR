import asyncio
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo

from sqlalchemy import select

from .db import init_db, SessionLocal
from .models import Recruiter, City, Template, Slot, SlotStatus


async def seed():
    await init_db()
    async with SessionLocal() as session:
        # 1) –†–µ–∫—Ä—É—Ç—ë—Ä –ú–∏—Ö–∞–∏–ª
        rec = await session.scalar(select(Recruiter).where(Recruiter.name == "–ú–∏—Ö–∞–∏–ª"))
        if not rec:
            rec = Recruiter(
                name="–ú–∏—Ö–∞–∏–ª",
                tg_chat_id=7588303412,  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–µ–Ω—è–µ—à—å
                tz="Europe/Moscow",
                telemost_url="https://telemost.yandex.ru/j/REPLACE_ME",
                active=True,
            )
            session.add(rec)
            await session.flush()

        # 2) –ì–æ—Ä–æ–¥–∞ (IANA —Ç–∞–π–º–∑–æ–Ω—ã)
        def get_or_create_city(name: str, tz: str):
            return session.scalar(select(City).where(City.name == name)), tz

        cities_want = [
            ("–°–æ—á–∏", "Europe/Moscow"),
            ("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "Asia/Novosibirsk"),
            ("–ê–ª–º–∞—Ç—ã", "Asia/Almaty"),
            ("–°–∞–º–∞—Ä–∞", "Europe/Samara"),
        ]
        city_objs = {}
        for name, tz in cities_want:
            city = await session.scalar(select(City).where(City.name == name))
            if not city:
                city = City(name=name, tz=tz, active=True)
                session.add(city)
                await session.flush()
            city_objs[name] = city

        # 3) –®–∞–±–ª–æ–Ω—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
        base_templates = {
            "approved": "‚úÖ –í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ {dt_local}. –†–µ–∫—Ä—É—Ç—ë—Ä: {recruiter}. –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.",
            "confirm_2h": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Å—Ç—Ä–µ—á–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ‚Äî {dt_local}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            "reminder_1h": "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Å—Ç—Ä–µ—á–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å ‚Äî {dt_local}.",
            "decline": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ª–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            "link_after_confirm": "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–¢–µ–ª–µ–º–æ—Å—Ç: {link}\\n–í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è {dt_local}.",
        }
        for city in city_objs.values():
            for key, content in base_templates.items():
                exists = await session.scalar(
                    select(Template).where(Template.city_id == city.id, Template.key == key)
                )
                if not exists:
                    session.add(Template(city_id=city.id, key=key, content=content))

        # 4) –ü–∞—Ä–∞ —Å–ª–æ—Ç–æ–≤ —É –ú–∏—Ö–∞–∏–ª–∞ (–≤ UTC). –°–æ–∑–¥–∞–¥–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è+3—á –∏ —Å–µ–≥–æ–¥–Ω—è+5—á –ø–æ –ú–°–ö.
        msk = ZoneInfo("Europe/Moscow")
        now_msk = datetime.now(msk)
        desired = [
            (now_msk + timedelta(hours=3)).replace(minute=0, second=0, microsecond=0),
            (now_msk + timedelta(hours=5)).replace(minute=0, second=0, microsecond=0),
            (now_msk + timedelta(days=1, hours=2)).replace(minute=0, second=0, microsecond=0),
        ]
        for dt_local in desired:
            start_utc = dt_local.astimezone(timezone.utc)
            exists = await session.scalar(
                select(Slot).where(
                    Slot.recruiter_id == rec.id,
                    Slot.start_utc == start_utc,
                )
            )
            if not exists:
                session.add(
                    Slot(
                        recruiter_id=rec.id,
                        city_id=city_objs["–°–æ—á–∏"].id,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –°–æ—á–∏/–ú–°–ö
                        start_utc=start_utc,
                        duration_min=60,
                        status=SlotStatus.FREE,
                    )
                )

        await session.commit()
    print("‚úÖ Seed complete")


if __name__ == "__main__":
    asyncio.run(seed())