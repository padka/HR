"""Configuration and core constants for the bot application."""

from __future__ import annotations

from typing import Any, Dict, List, Optional, Tuple, TypedDict

import logging

from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

from backend.core.settings import get_settings
from backend.domain.default_questions import DEFAULT_TEST_QUESTIONS
from backend.domain.test_questions import load_all_test_questions

settings = get_settings()

DEFAULT_TZ = settings.timezone or "Europe/Moscow"
TIME_FMT = "%d.%m %H:%M"
BOT_TOKEN = settings.bot_token
DEFAULT_BOT_PROPERTIES = DefaultBotProperties(parse_mode=ParseMode.HTML)

# –ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ 2 (–¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)
PASS_THRESHOLD = 0.75
MAX_ATTEMPTS = 3
TIME_LIMIT = 120  # —Å–µ–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å (–¢–µ—Å—Ç 2)

RemKey = Tuple[int, int]


class State(TypedDict, total=False):
    """In-memory representation of candidate state."""

    flow: str  # 'interview' | 'intro'
    t1_idx: Optional[int]
    t1_current_idx: Optional[int]
    test1_answers: Dict[str, str]
    t1_last_prompt_id: Optional[int]
    t1_last_question_text: str
    t1_requires_free_text: bool
    t1_sequence: List[Dict[str, Any]]

    fio: str
    city_name: str
    city_id: Optional[int]
    candidate_tz: str

    t2_attempts: Dict[int, Dict[str, Any]]
    picked_recruiter_id: Optional[int]
    picked_slot_id: Optional[int]

    format_choice: Optional[str]
    study_mode: Optional[str]
    study_schedule: Optional[str]
    study_flex: Optional[str]
    test1_payload: Dict[str, Any]

    manual_contact_prompt_sent: bool


try:
    _QUESTIONS_BANK = load_all_test_questions()
except Exception:  # pragma: no cover - fallback for missing DB tables
    logging.getLogger(__name__).warning(
        "Falling back to default test questions; database is not available."
    )
    _QUESTIONS_BANK = DEFAULT_TEST_QUESTIONS
TEST2_QUESTIONS: List[Dict[str, Any]] = (
    _QUESTIONS_BANK.get("test2", DEFAULT_TEST_QUESTIONS.get("test2", [])).copy()
)
TEST1_QUESTIONS: List[Dict[str, Any]] = (
    _QUESTIONS_BANK.get("test1", DEFAULT_TEST_QUESTIONS.get("test1", [])).copy()
)

FOLLOWUP_NOTICE_PERIOD = {
    "id": "notice_period",
    "prompt": (
        "‚è≥ –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞ –∏ –ø–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?\n"
        "<i>–ù–∞–º –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —Å–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2‚Äì3 –¥–Ω—è.</i>"
    ),
    "placeholder": "–ù–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 2 –¥–Ω—è / —É–∂–µ –≥–æ—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞",
}

FOLLOWUP_STUDY_MODE = {
    "id": "study_mode",
    "prompt": "üéì –£—á–∏—Ç–µ—Å—å –æ—á–Ω–æ –∏–ª–∏ –∑–∞–æ—á–Ω–æ?",
    "options": [
        "–û—á–Ω–æ",
        "–û—á–Ω–æ, –Ω–æ –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫",
        "–ó–∞–æ—á–Ω–æ",
        "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ",
        "–î—Ä—É–≥–æ–µ",
    ],
}

FOLLOWUP_STUDY_SCHEDULE = {
    "id": "study_schedule",
    "prompt": (
        "üóìÔ∏è –ü–æ–ª—É—á–∏—Ç—Å—è –ª–∏ —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º 5/2 —Å 9:00 –¥–æ 18:00?\n"
        "<i>–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.</i>"
    ),
    "options": [
        "–î–∞, —Å–º–æ–≥—É",
        "–°–º–æ–≥—É, –Ω–æ –Ω—É–∂–µ–Ω –∑–∞–ø–∞—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        "–ë—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ",
        "–ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É",
    ],
}

FOLLOWUP_STUDY_FLEX = {
    "id": "study_flex",
    "prompt": (
        "üß≠ –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≥–∏–±–∫–æ—Å—Ç—å, –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏–π?"
    ),
    "options": [
        "–î–∞, –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å",
        "–ù—É–∂–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
        "–ù–µ—Ç, –Ω–µ —Å–º–æ–≥—É",
    ],
}

__all__ = [
    "BOT_TOKEN",
    "DEFAULT_BOT_PROPERTIES",
    "DEFAULT_TZ",
    "FOLLOWUP_NOTICE_PERIOD",
    "FOLLOWUP_STUDY_MODE",
    "FOLLOWUP_STUDY_SCHEDULE",
    "FOLLOWUP_STUDY_FLEX",
    "MAX_ATTEMPTS",
    "PASS_THRESHOLD",
    "RemKey",
    "State",
    "TEST1_QUESTIONS",
    "TEST2_QUESTIONS",
    "TIME_FMT",
    "TIME_LIMIT",
]
